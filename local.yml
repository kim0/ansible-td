---
- hosts: localhost
 
  tasks:
  - name: Inject kim0 ssh key
    authorized_key:
      user: ubuntu
      key: https://github.com/kim0.keys

  - name: Install list of packages (in one shot for efficiency)
    action: apt pkg={{item}} state=installed
    with_items:
    - nginx
    - php
    - nodejs
    - git
    - curl
    - composer
    - php7.0-odbc
    - php-phpdocumentor-reflection
    - php7.0-xml
    - libapache2-mod-php7.0
    - php-bcmath
    - php-bz2
    - php-calendar
    - php-ctype
    - php-curl
    - php-date
    - php-dom
    - php-enchant
    - php-exif
    - php-mcrypt
    - php-memcached
    - php-mongodb
    - php-mysqli
    - php-mysqlnd
    - php-odbc
    - npm
    - python-mysqldb

  - name: Ensure nginx webroot
    file:
      path: /var/www/tdapp/
      state: directory

  - name: Ensure nginx config
    copy:
      dest: /etc/nginx/sites-available/tdapp
      content: |
        server {
                listen 80 default_server;
                listen [::]:80 default_server;
        
                root /var/www/tdapp;
                index index.html index.htm index.nginx-debian.html;
        
                server_name _;
        
                location / {
                        try_files $uri $uri/ =404;
                }
        }

  - name: Ensure nginx config enabled
    file:
      path: /etc/nginx/sites-enabled/tdapp
      state: link
      src: /etc/nginx/sites-available/tdapp

  - name: Ensure nginx default website not available
    file:
      path: /etc/nginx/sites-enabled/default
      state: absent

  - name: Ensure nginx service enabled
    service:
      name: nginx
      state: started
      enabled: yes

  - name: Configure php.ini memory_limit
    lineinfile:
      path: /etc/php/7.0/fpm/php.ini
      regexp: '^memory_limit ='
      line: 'memory_limit = 512M'

  - name: Configure php.ini max_execution_time
    lineinfile:
      path: /etc/php/7.0/fpm/php.ini
      regexp: '^max_execution_time ='
      line: 'max_execution_time = 600'

  - name: Configure php.ini post_max_size
    lineinfile:
      path: /etc/php/7.0/fpm/php.ini
      regexp: '^post_max_size ='
      line: 'post_max_size = 20M'

  - name: Configure php.ini short_open_tag
    lineinfile:
      path: /etc/php/7.0/fpm/php.ini
      regexp: '^short_open_tag ='
      line: 'short_open_tag = Off'

  - name: Configure php.ini session.save_handler
    lineinfile:
      path: /etc/php/7.0/fpm/php.ini
      regexp: '^session.save_handler ='
      line: 'session.save_handler = memcache'

  - name: Configure php.ini session.save_path
    lineinfile:
      path: /etc/php/7.0/fpm/php.ini
      regexp: '^session.save_path ='
      insertafter: '^session.save_handler'
      line: "session.save_path = 'tcp://10.1.1.1:11211'"

  - name: Configure php.ini display_errors
    lineinfile:
      path: /etc/php/7.0/fpm/php.ini
      regexp: '^display_errors ='
      line: "display_errors = On"

  - name: Ensure nodejs is linked to node
    file:
      path: /usr/bin/node
      state: link
      src: /usr/bin/nodejs

  - name: Install nodejs modules
    action: npm name={{item}} state=present global=yes
    with_items:
    - gulp
    - grunt
    - nvm
    - bower
    - yo
    - browser-sync
    - browserify
    - pm2
    - webpack

  - name: Install Percona 5.7 apt repo
    apt:
      deb: https://repo.percona.com/apt/percona-release_0.1-4.xenial_all.deb

  - name: Install databases and caching tiers
    action: apt pkg={{item}} state=installed update_cache=yes
    with_items:
    - redis-server
    - redis-tools
    - memcached
    - mongodb
    - percona-server-server-5.7

  - name: Ensure DB services are running and enabled
    action: service name={{item}} state=started enabled=yes
    with_items:
    - redis
    - mongodb
    - memcached

  - name: Ensure Mongo collection is created
    shell: mongo --eval "db.createCollection('tdmongodb')"

  - name: Generate percona random consistent password
    copy:
      dest: /root/.my.cnf
      content: |
        [client]
        user=root
        password={{ ansible_hostname | to_uuid }}

  - name: Ensure root password is set
    mysql_user:
      name: root
      password: "{{ ansible_hostname | to_uuid }}"
      priv: '*.*:ALL,GRANT'
      state: present

  - name: Ensure DB tdmongodb exists
    mysql_db:
      name: tddatabase
      state: present

  - name: Ensure tdro user exists and readonly
    mysql_user:
      name: tdro
      login_password: "{{ ansible_hostname | to_uuid }}"
      password: "readOnlyP@ss"
      priv: 'tddatabase.*:SELECT'
      state: present

  - name: Ensure tdrw user exists and readwrite
    mysql_user:
      name: tdrw
      login_password: "{{ ansible_hostname | to_uuid }}"
      password: "someComPl3xP@ssw0rd"
      priv: 'tddatabase.*:ALL'
      state: present

